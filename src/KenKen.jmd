# KenKen

```julia
# Define a simple problem
kenken_size = 3
kenken_cages = [
    Dict(:cells => [(1, 1), (2, 1)], :value => 5, :operation => +),
    Dict(:cells => [(1, 2), (1, 3)], :value => 3, :operation => +),
    Dict(:cells => [(2, 2)], :value => 3, :operation => +),
    Dict(:cells => [(2, 3), (3, 3)], :value => 4, :operation => +),
    Dict(:cells => [(3, 1), (3, 2)], :value => 3, :operation => +),
]

# Define a harder problem
# kenken_size = 5
# kenken_cages = [
#     Dict(:cells => [(1, 1), (2, 1), (3, 1)], :value => 11, :operation => +),
#     Dict(:cells => [(1, 2), (2, 2), (3, 2)], :value => 6, :operation => +),
#     Dict(:cells => [(1, 3), (1, 4), (2, 3)], :value => 9, :operation => +),
#     Dict(:cells => [(1, 5)], :value => 2, :operation => +),
#     Dict(:cells => [(2, 4), (2, 5), (3, 5), (4, 5)], :value => 12, :operation => +),
#     Dict(:cells => [(3, 3), (3, 4), (4, 4)], :value => 11, :operation => +),
#     Dict(:cells => [(4, 1), (4, 2), (4, 3), (5, 2)], :value => 14, :operation => +),
#     Dict(:cells => [(5, 1)], :value => 1, :operation => +),
#     Dict(:cells => [(5, 3), (5, 4), (5, 5)], :value => 9, :operation => +),
# ]

# Define a hard problem
# kenken_size = 6
# kenken_cages = [
#     Dict(:cells => [(1, 1)], :value => 1, :operation => +),
#     Dict(:cells => [(2, 1), (1, 2), (2, 2)], :value => 15, :operation => +),
#     Dict(:cells => [(3, 1), (4, 1), (3, 2)], :value => 10, :operation => +),
#     Dict(:cells => [(5, 1), (4, 2), (5, 2), (4, 3)], :value => 13, :operation => +),
#     Dict(:cells => [(6, 1), (6, 2), (6, 3)], :value => 11, :operation => +),
#     Dict(:cells => [(1, 3), (2, 3), (1, 4), (1, 5)], :value => 13, :operation => +),
#     Dict(:cells => [(3, 3), (3, 4), (3, 5)], :value => 11, :operation => +),
#     Dict(:cells => [(5, 3), (5, 4), (6, 4)], :value => 7, :operation => +),
#     Dict(:cells => [(2, 4), (2, 5)], :value => 7, :operation => +),
#     Dict(:cells => [(4, 4), (4, 5), (4, 6)], :value => 11, :operation => +),
#     Dict(:cells => [(5, 5), (6, 5), (5, 6)], :value => 13, :operation => +),
#     Dict(:cells => [(1, 6), (2, 6), (3, 6)], :value => 9, :operation => +),
#     Dict(:cells => [(6, 6)], :value => 5, :operation => +),
# ]

# # Define a super hard problem
# kenken_size = 9
# kenken_cages = [
#     Dict(:cells => [(1, 1), (1, 2)], :value => 54, :operation => *),
#     Dict(:cells => [(2, 1), (3, 1), (4, 1), (5, 1)], :value => 10, :operation => +),
#     Dict(:cells => [(6, 1), (7, 1), (8, 1)], :value => 20, :operation => +),
#     Dict(:cells => [(9, 1), (9, 2)], :value => 5, :operation => -),
#     Dict(:cells => [(2, 2), (3, 2)], :value => 2, :operation => /),
#     Dict(:cells => [(4, 2), (5, 2)], :value => 3, :operation => -),
#     Dict(:cells => [(6, 2), (6, 3), (6, 4)], :value => 20, :operation => *),
#     Dict(:cells => [(7, 2), (8, 2)], :value => 5, :operation => -),
#     Dict(:cells => [(1, 3), (2, 3)], :value => 8, :operation => -),
#     Dict(:cells => [(3, 3), (4, 3), (5, 3)], :value => 168, :operation => *),
#     Dict(:cells => [(7, 3), (7, 4)], :value => 1, :operation => -),
#     Dict(:cells => [(8, 3), (9, 3)], :value => 2, :operation => /),
#     Dict(:cells => [(1, 4), (1, 5)], :value => 15, :operation => *),
#     Dict(:cells => [(2, 4), (3, 4)], :value => 5, :operation => -),
#     Dict(:cells => [(4, 4), (4, 5)], :value => 72, :operation => *),
#     Dict(:cells => [(5, 4), (5, 5)], :value => 8, :operation => -),
#     Dict(:cells => [(8, 4), (8, 5)], :value => 3, :operation => /),
#     Dict(:cells => [(9, 4), (9, 5)], :value => 2, :operation => -),
#     Dict(:cells => [(2, 5), (3, 5), (3, 6), (3, 7)], :value => 22, :operation => +),
#     Dict(:cells => [(6, 5), (6, 6)], :value => 4, :operation => -),
#     Dict(:cells => [(7, 5)], :value => 4, :operation => +),
#     Dict(:cells => [(1, 6), (1, 7)], :value => 3, :operation => -),
#     Dict(:cells => [(2, 6), (2, 7)], :value => 4, :operation => /),
#     Dict(:cells => [(4, 6), (4, 7)], :value => 2, :operation => /),
#     Dict(:cells => [(5, 6), (5, 7)], :value => 2, :operation => -),
#     Dict(:cells => [(7, 6), (8, 6)], :value => 3, :operation => /),
#     Dict(:cells => [(8, 6)], :value => 5, :operation => +),
#     Dict(:cells => [(6, 7), (7, 7), (7, 8)], :value => 16, :operation => +),
#     Dict(:cells => [(8, 7), (9, 7)], :value => 5, :operation => -),
#     Dict(:cells => [(1, 8), (1, 9), (2, 9)], :value => 80, :operation => *),
#     Dict(:cells => [(2, 8), (3, 8), (3, 9)], :value => 14, :operation => +),
#     Dict(:cells => [(4, 8), (5, 8), (6, 8)], :value => 10, :operation => +),
#     Dict(:cells => [(8, 8), (8, 9)], :value => 3, :operation => /),
#     Dict(:cells => [(9, 8), (9, 9)], :value => 6, :operation => -),
#     Dict(:cells => [(4, 9), (5, 9), (6, 9), (7, 9)], :value => 30, :operation => +),
# ]
```

## Introduction

[KenKen](https://en.wikipedia.org/wiki/KenKen) is a number puzzle similar to the Sodoku where the goal is to place the digits 1 to ``N`` on an ``N \times N`` grid, with some of the digits already filled in.

Our solution must satisfy the following rules:

* The digits 1 to 9 must appear once each in each row.
* The digits 1 to 9 must appear once each in each column.
* The digits in each shape outlined by thicker lines (called a cage) must equal the number in the corner of the cage when combined using the cage's operation.

## Solver

We will use the integer solver from [Cbc.jl](https://github.com/JuliaOpt/Cbc.jl) for this example.

```julia
using JuMP
using Cbc
```

This isn't an optimization problem, its actually a feasibility problem, we want to find a feasible solution that satsifies the rules, so we set `maxSolutions` to 1 so that the solver stops as soon as it finds a solution.

```julia
# Create a JuMP optimiser
kenken = Model(with_optimizer(Cbc.Optimizer, maxSolutions = 1))
```

We will define a binary variable for each possible number in each possible cell, i.e., the variable ``x_{i, j, k}`` will be 1 if the cell at position ``(i, j)`` contains the digit ``k`` and 0 otherwise.

```julia
@variable(kenken, x[i = 1:kenken_size, j = 1:kenken_size, k = 1:kenken_size], Bin)
```

Now we can add out first constraint: that each cell must contain exactly one digit.
For each cell position ``(i, j)``, we constrain that the sum of the possible digits.

```julia
for i in 1:kenken_size, j in 1:kenken_size
    @constraint(kenken, sum(x[i, j, k] for k in 1:kenken_size) == 1)
end
```

```julia

# for Each row, OR each column and for Each digit
for index in 1:kenken_size, k in 1:kenken_size
        # Sum across columns 
        @constraint(kenken, sum(x[index, j, k] for j in 1:kenken_size) == 1)
        # Sum across rows 
        @constraint(kenken, sum(x[i, index, k] for i in 1:kenken_size) == 1)
end

# Constrain the cages
for cage in kenken_cages
    @constraint(
        kenken,
        reduce(
            cage[:operation],
            k * x[i, j, k] for (i, j) in cage[:cells], k in 1:kenken_size
        ) == cage[:value]
    )
end

@info "Solving"
optimize!(kenken)
@info "Solved"

# Extract the values of x
# Integer programs are solved as a series of linear programs
# so the values might not be precisely 0 and 1. We can just
# round them to the nearest integer to make it easier
x_solution = round.(Integer, value.(x))

# Create a matrix to store the solution
matrix_solution = zeros(Int, kenken_size, kenken_size)  # 9x9 matrix of integers
for i in 1:kenken_size, j in 1:kenken_size, k in 1:kenken_size
    if x_solution[i, j, k] == 1
        matrix_solution[i, j] = k
    end
end

# Display the solution
matrix_solution
```


Now we can begin to add our constraints. We'll actually start with something obvious to us as humans, but what we need to enforce: that there can be only one number per cell.
```
In [3]:

for i = 1:9, j = 1:9  # Each row and each column
    # Sum across all the possible digits
    # One and only one of the digits can be in this cell, 
    # so the sum must be equal to one
    @addConstraint(sudoku, sum{x[i,j,k],k=1:9} == 1)
end
```
Next we'll add the constraints for the rows and the columns. These constraints are all very similar, so much so that we can actually add them at the same time.
```
In [4]:

for ind = 1:9  # Each row, OR each column
    for k = 1:9  # Each digit
        # Sum across columns (j) - row constraint
        @addConstraint(sudoku, sum{x[ind,j,k],j=1:9} == 1)
        # Sum across rows (i) - column constraint
        @addConstraint(sudoku, sum{x[i,ind,k],i=1:9} == 1)
    end
end
```
Finally, we have the to enforce the constraint that each digit appears once in each of the nine 3x3 sub-grids. Our strategy will be to index over the top-left corners of each 3x3 square with for loops, then sum over the squares.
```
In [7]:

for i = 1:3:7, j = 1:3:7, k = 1:9
    # i is the top left row, j is the top left column
    # We'll sum from i to i+2, e.g. i=4, r=4, 5, 6
    @addConstraint(sudoku, sum{x[r,c,k], r=i:i+2, c=j:j+2} == 1)
end
```
The final step is to add the initial solution as a set of constraints. We'll solve the problem that is in the picture at the start of the notebook. We'll put a 0 if there is no digit in that location.
```
In [8]:

# The given digits
init_sol = [ 5 3 0 0 7 0 0 0 0;
             6 0 0 1 9 5 0 0 0;
             0 9 8 0 0 0 0 6 0;
             8 0 0 0 6 0 0 0 3;
             4 0 0 8 0 3 0 0 1;
             7 0 0 0 2 0 0 0 6;
             0 6 0 0 0 0 2 8 0;
             0 0 0 4 1 9 0 0 5;
             0 0 0 0 8 0 0 7 9]
for i = 1:9, j = 1:9
    # If the space isn't empty
    if init_sol[i,j] != 0
        # Then the corresponding variable for that digit
        # and location must be 1
        @addConstraint(sudoku, x[i,j,init_sol[i,j]] == 1)
    end
end
```
```
In [9]:

# We are now ready to solve the problem
# For this to work, you must have an integer programming
# solver installed. If you don't, you can install one with
# Pkg.add("GLPKMathProgInterface")
# or
# Pkg.add("Cbc")
solve(sudoku)
```
```
Out[9]:

:Optimal
```

To display the solution, we need to look for the values of x[i,j,k] that are 1.
```
In [10]:

# Extract the values of x
x_val = getValue(x)
# Create a matrix to store the solution
sol = zeros(Int,9,9)  # 9x9 matrix of integers
for i in 1:9, j in 1:9, k in 1:9
    # Integer programs are solved as a series of linear programs
    # so the values might not be precisely 0 and 1. We can just
    # round them to the nearest integer to make it easier
    if iround(x_val[i,j,k]) == 1
        sol[i,j] = k
    end
end
# Display the solution
println(sol)
```
```
[5 3 4 6 7 8 9 1 2
 6 7 2 1 9 5 3 4 8
 1 9 8 3 4 2 5 6 7
 8 5 9 7 6 1 4 2 3
 4 2 6 8 5 3 7 9 1
 7 1 3 9 2 4 8 5 6
 9 6 1 5 3 7 2 8 4
 2 8 7 4 1 9 6 3 5
 3 4 5 2 8 6 1 7 9]
```

